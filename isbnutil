#!/bin/sh
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) Tiny ISBN utilities.

# Copyright (c) 2014 eel3
#
# This software is provided 'as-is', without any express or implied
# warranty. In no event will the authors be held liable for any damages
# arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose,
# including commercial applications, and to alter it and redistribute it
# freely, subject to the following restrictions:
#
#     1. The origin of this software must not be misrepresented; you must not
#     claim that you wrote the original software. If you use this software
#     in a product, an acknowledgment in the product documentation would be
#     appreciated but is not required.
#
#     2. Altered source versions must be plainly marked as such, and must not be
#     misrepresented as being the original software.
#
#     3. This notice may not be removed or altered from any source
#     distribution.

set -u
umask 0022
IFS=$(printf ' \t\n_'); IFS=${IFS%_}
PATH=/bin:/usr/bin
export IFS LC_ALL=C LANG=C PATH

readonly progname=${0##*/}
readonly version=1.1.0.20190406

# isbn_cksum <ISBN_without_check_digit>
isbn_cksum() {
    echo "$1" | awk '
    /^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/ {
        for (i = 1; i < 10; i++) {
            n += (11 - i) * substr($0, i, 1)
        }
        n %= 11
        print (n == 0) ? 0 : (n == 1) ? "X" : 11 - n
        exit 0
    }
    /^97[89][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$/ {
        n += substr($0,  1, 1)
        n += substr($0,  2, 1) * 3
        n += substr($0,  3, 1)
        n += substr($0,  4, 1) * 3
        n += substr($0,  5, 1)
        n += substr($0,  6, 1) * 3
        n += substr($0,  7, 1)
        n += substr($0,  8, 1) * 3
        n += substr($0,  9, 1)
        n += substr($0, 10, 1) * 3
        n += substr($0, 11, 1)
        n += substr($0, 12, 1) * 3
        n %= 10
        print (n == 0) ? 0 : 10 - n
        exit 0
    }
    {
        print $0 ": invalid value" > "/dev/stderr"
        exit 1
    }
    '
}

# isbn_convert <ISBN-10_or_ISBN-13>
isbn_convert() {
    code=$(echo "$1" | sed -n 's/^\([0-9]\{9\}\)[0-9X]$/978\1/p
                              s/^978\([0-9]\{9\}\)[0-9]$/\1/p')
    if [ -z "$code" ]; then
        echo "$1: cannot convert" 1>&2
        return 1
    fi

    sum=$(isbn_cksum "$code" 2>/dev/null)
    if [ -z "$sum" ]; then
        echo "$1: cannot convert" 1>&2
        return 1
    fi

    echo "$code$sum"
}

# isbn_test <ISBN>
isbn_test() {
    code=$(echo "$1" | sed -n 's/^\([0-9]\{9\}\)[0-9X]$/\1/p
                              s/^\(97[89][0-9]\{9\}\)[0-9]$/\1/p')
    [ -z "$code" ] && return 1

    sum=$(isbn_cksum "$code" 2>/dev/null)
    [ "$code$sum" = "$1" ]
}

# isbn_type <ISBN>
isbn_type() {
    if isbn_test "$1"; then
        expr "$1" : '.*'
    else
        echo none
        return 1
    fi
}

# usage <exit-code>
usage() {
    cat <<- EOT 1>&2
		usage: $progname [-hv] <command> <ISBN>
		command:
		    cksum     Calculate ISBN check digit (arg is ISBN without check digit)
		    convert   Convert ISBN-10 to ISBN-13, or ISBN-13 to ISBN-10
		    test      Validate ISBN check digit (test(1) like)
		    type      Check and print ISBN type (10, 13, none)
	EOT
    exit $1
}

# version (no parameter)
version() {
    echo "$progname $version" 1>&2
    exit 0
}

# main routine

opt=
while getopts 'hv' opt; do
    case $opt in
    h)      usage 0 ;;
    v)      version ;;
    \?)     usage 1 ;;
    esac
done
shift $(($OPTIND - 1))

[ $# -eq 2 ] || usage 1
isbn=$(echo $2)

case "$1" in
cksum)      isbn_cksum "$isbn" ;;
convert)    isbn_convert "$isbn" ;;
test)       isbn_test "$isbn" ;;
type)       isbn_type "$isbn" ;;
*)          usage 1 ;;
esac
